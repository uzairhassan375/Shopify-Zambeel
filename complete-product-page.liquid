{% comment %}
  Complete Product Page Template with Dynamic Metafields
  Matches the design from the provided image
{% endcomment %}


<section id="MainProduct-{{ section.id }}" data-section="{{ section.id }}" data-product-handle="{{ product.handle }}">
  {%- comment -%} CSS imports removed - all styles are inline {%- endcomment -%}

  {%- assign current_variant = product.selected_or_first_available_variant -%}

  <div class="dynamic-product-page">
    <div class="full-viewport-breakout">
      <!-- Product Images and Info Section - Full Width -->
      <section class="full-width-sections">
      <div class="full-width-container">
        <div class="product-layout-flex">
        <!-- Product Images -->
        <div class="product-image-section">
          <div class="product-image-gallery">
            {% if product.media.size > 0 %}
              <div class="main-image-container">
                {% for media in product.media limit: 1 %}
                  <img 
                    src="{{ media.preview_image | image_url: width: 1920 }}" 
                    alt="{{ media.alt | escape }}" 
                    class="main-product-image"
                    loading="eager"
                    width="{{ media.preview_image.width }}"
                    height="{{ media.preview_image.height }}">
                {% endfor %}
                <div class="image-counter">
                  <span class="current-image">1</span>/<span class="total-images">{{ product.media.size }}</span>
                </div>
              </div>
              
              {% if product.media.size > 1 %}
              <div class="thumbnail-gallery">
                {% for media in product.media %}
                  <div class="thumbnail-item {% if forloop.first %}active{% endif %}">
                    <img 
                      src="{{ media.preview_image | image_url: width: 300 }}" 
                      alt="{{ media.alt | escape }}" 
                      class="thumbnail-image"
                      loading="lazy"
                      width="{{ media.preview_image.width }}"
                      height="{{ media.preview_image.height }}">
                  </div>
                {% endfor %}
              </div>
              {% endif %}
            {% endif %}
          </div>
        </div>

        <!-- Product Information -->
        <div class="product-info-section">
          <div class="product-info-container">
            <!-- Breadcrumbs -->
            <nav class="breadcrumbs">
              <a href="/">Home</a> / 
              <a href="/collections/all">Products</a> / 
              <span>{{ product.title }}</span>
            </nav>

            <!-- Product Title -->
            <h1 class="product-title">{{ product.title | escape }}</h1>
            
            <!-- Tagline -->
            <p class="product-tagline">{{ product.metafields.custom.product_tagline | default: "30 Days Replacement Warranty" }}</p>
            

            <!-- Inventory Location -->
            <div class="inventory-location" style="display: none;">
              <span class="location-icon">üìç</span>
              <span>Inventory Location: {{ product.metafields.custom.location | default: "UAE-Warehouse" }}</span>
            </div>


            <!-- Product Details Card -->
            <div class="product-details-card">
              <div class="product-description-container">
                <div class="product-description" id="product-description-{{ section.id }}">
                  {{ product.metafields.custom.product_description | default: product.description }}
                </div>
                <div class="read-more-wrapper" id="read-more-wrapper-{{ section.id }}" style="display: none;">
                  <a href="#" class="read-more-link" id="read-more-link-{{ section.id }}">
                    Read More <span class="arrow">‚Üì</span>
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      </div>
    </section>

    <!-- Full Width Sections After Image -->
    <section class="full-width-sections">
      <div class="full-width-container">

        <!-- Main Tabs -->
        <div class="main-tabs">
          <button class="tab-btn active" data-tab="dropshipping">Dropshipping</button>
          <button class="tab-btn" data-tab="wholesale">
            Wholesale
            <span class="coming-soon-badge">Coming Soon</span>
          </button>
          <button class="tab-btn" data-tab="customisation">
            Customisation
            <span class="coming-soon-badge">Coming Soon</span>
          </button>
        </div>

        <!-- Dropshipping Information -->
        <div class="dropshipping-info">
          <div class="info-header">
            <h3>Dropshipping Information</h3>
          </div>
          
          <div class="select-country">
            <span class="country-label">Country where you want to sell? (Price & SKU Code Varies)</span>
            <div class="country-selection">
              {% assign inventory_location = product.metafields.custom.location | default: "UAE-Warehouse" %}
              {% if inventory_location contains "UAE" or inventory_location contains "uae" %}
                <button class="variant-box-btn" data-country="uae">UAE</button>
              {% endif %}
              {% if inventory_location contains "KSA" or inventory_location contains "ksa" or inventory_location contains "Saudi" %}
                <button class="variant-box-btn" data-country="ksa">KSA</button>
              {% endif %}
              {% unless inventory_location contains "UAE" or inventory_location contains "uae" or inventory_location contains "KSA" or inventory_location contains "ksa" or inventory_location contains "Saudi" %}
                <button class="variant-box-btn" data-country="uae">UAE</button>
                <button class="variant-box-btn" data-country="ksa">KSA</button>
              {% endunless %}
            </div>
          </div>

          <!-- Variant Selection -->
          <div class="variant-selection-section">
            {% for option in product.options_with_values %}
              {% assign option_name_lower = option.name | downcase %}
              {% unless option_name_lower contains 'country' or option_name_lower contains 'warehouse' or option_name_lower contains 'location' %}
                <div class="variant-option-group">
                  <label class="variant-option-label">{{ option.name }}</label>
                  <div class="variant-boxes-container" data-option-position="{{ option.position }}" data-option-name="{{ option.name }}">
                    {% for value in option.values %}
                      <button class="variant-box-btn" data-option-value="{{ value | escape }}" {% if forloop.first %}data-selected="true"{% endif %}>
                        {{ value }}
                      </button>
                    {% endfor %}
                  </div>
                </div>
              {% endunless %}
            {% endfor %}
          </div>
          
          <!-- Hidden variant data for JavaScript -->
          <script type="application/json" id="variant-data">
            [
              {% for variant in product.variants %}
              {
                "id": {{ variant.id }},
                "title": "{{ variant.title | escape }}",
                "available": {{ variant.available }},
                "option1": "{{ variant.option1 | escape }}",
                "option2": "{{ variant.option2 | escape }}",
                "option3": "{{ variant.option3 | escape }}",
                "dispatchTime": "{{ variant.metafields.custom.dispatching_time | default: product.metafields.custom.dispatching_time | default: '1-2 days Processing' }}",
                "deliveryTime": "{{ variant.metafields.custom.delivery_time | default: product.metafields.custom.delivery_time | default: '3-5 days Shipping' }}",
                "variantLocation": "{{ variant.metafields.custom.ships_from | default: product.metafields.custom.ships_from | default: 'UAE' }}",
                "inventoryMin": {{ variant.metafields.custom.inv_min | default: product.metafields.custom.inv_min | default: 103 | plus: 0 }},
                "inventoryMax": {{ variant.metafields.custom.inv_max | default: product.metafields.custom.inv_max | default: 596 | plus: 0 }},
                "inventorySeed": {{ variant.metafields.custom.inv_seed | default: product.metafields.custom.inv_seed | default: 0 | plus: 0 }}
              }{% unless forloop.last %},{% endunless %}
              {% endfor %}
            ]
          </script>
        </div>

        <!-- Market Insights Card -->
        <div class="market-insights-card">
          <div class="insights-header">
            <h3>Market Insights<span class="selected-country-wrapper"> for <span class="selected-country"></span></span></h3>
          </div>
          
          <div class="insights-grid">
            <div class="insight-item">
              <span class="tooltip-icon-corner">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <circle cx="12" cy="12" r="10"></circle>
                  <line x1="12" y1="16" x2="12" y2="12"></line>
                  <line x1="12" y1="8" x2="12.01" y2="8"></line>
                </svg>
                <span class="tooltip-text">This is an indicator which tells how many sellers are selling this product</span>
              </span>
              <div class="insight-content">
                <span class="insight-label">Market Saturation</span>
                <span class="insight-value saturation-low">{{ current_variant.metafields.custom.market_saturation | default: "Low" }}</span>
              </div>
            </div>
            
            <div class="insight-item">
              <span class="tooltip-icon-corner">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <circle cx="12" cy="12" r="10"></circle>
                  <line x1="12" y1="16" x2="12" y2="12"></line>
                  <line x1="12" y1="8" x2="12.01" y2="8"></line>
                </svg>
                <span class="tooltip-text">This information is based on the thousands of orders delivered under this category</span>
              </span>
              <div class="insight-content">
                <span class="insight-label">Expected Delivery Ratio</span>
                <span class="insight-value delivery-success">{{ current_variant.metafields.custom.expected_delivery_ratio | default: "88%" }}</span>
              </div>
            </div>
            
            <div class="insight-item">
              <span class="tooltip-icon-corner">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <circle cx="12" cy="12" r="10"></circle>
                  <line x1="12" y1="16" x2="12" y2="12"></line>
                  <line x1="12" y1="8" x2="12.01" y2="8"></line>
                </svg>
                <span class="tooltip-text">Return on Ad Spend - Expected revenue multiplier for every dollar spent on advertising this product.</span>
              </span>
              <div class="insight-content">
                <span class="insight-label">Expected ROAS</span>
                <span class="insight-value roas">{{ current_variant.metafields.custom.expected_roas | default: "2.2x - 3.8x" }}</span>
              </div>
            </div>
            
            <div class="insight-item">
              <span class="tooltip-icon-corner">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <circle cx="12" cy="12" r="10"></circle>
                  <line x1="12" y1="16" x2="12" y2="12"></line>
                  <line x1="12" y1="8" x2="12.01" y2="8"></line>
                </svg>
                <span class="tooltip-text">Recommended retail price for maximum profit margin while staying competitive in the market.</span>
              </span>
              <div class="insight-content">
                <span class="insight-label">Suggested Selling Cost</span>
                <span class="insight-value suggested-selling-price" 
                      data-suggested-price-uae="{{ product.metafields.custom.suggested_selling_price_uae | default: current_variant.price | plus: 3000 | money }}"
                      data-suggested-price-ksa="{{ product.metafields.custom.suggested_selling_price_ksa | default: current_variant.price | plus: 3500 | money }}">
                  {{ product.metafields.custom.suggested_selling_price_uae | default: current_variant.price | plus: 3000 | money }}
                </span>
              </div>
            </div>
          </div>
        </div>

        <!-- Selected Variant Information Card -->
        <div class="variants-card">
          <div class="variants-header">
            <h3>Selected Variant Information</h3>
          </div>
          
          <div class="variants-table">
            <div class="table-header">
              <div class="col-variant">Variant</div>
              <div class="col-sku">SKU Code</div>
              <div class="col-price">Product Cost</div>
              <div class="col-delivery">Delivery Cost</div>
              <div class="col-total">Total Cost<br><span style="font-size: 11px; font-weight: 400;">(Product Cost + Delivery)</span></div>
              <div class="col-stock">Available Inventory</div>
            </div>
            
            {% for variant in product.variants %}
            <div class="table-row" data-variant-id="{{ variant.id }}" data-variant-title="{{ variant.title }}" style="display: none;">
              <div class="col-variant">
                <span class="variant-name">{{ variant.title }}</span>
              </div>
              <div class="col-sku" data-label="SKU">
                <span class="sku-code" 
                      data-sku-uae="{{ variant.sku }}"
                      data-sku-ksa="{{ variant.sku }}">
                  {{ variant.sku }}
                </span>
              </div>
              <div class="col-price" data-label="Product Cost">
                <div class="price-container">
                  {% if variant.compare_at_price and variant.compare_at_price > variant.price %}
                    <div class="compare-at-price">
                      <span class="compare-price" 
                            data-compare-uae="{{ variant.compare_at_price }}"
                            data-compare-ksa="{{ variant.compare_at_price }}"
                            data-currency-uae="AED"
                            data-currency-ksa="SAR">
                        {{ variant.compare_at_price | money }}
                      </span>
                    </div>
                  {% endif %}
                  <span class="product-price" 
                        data-price-uae="{{ product.metafields.custom.product_price | default: variant.price }}"
                        data-price-ksa="{{ product.metafields.custom.product_price | default: variant.price }}"
                        data-currency-uae="AED"
                        data-currency-ksa="SAR">
                    {{ variant.price | money }}
                  </span>
                </div>
              </div>
              <div class="col-delivery" data-label="Delivery Cost">
                <span class="delivery-cost" 
                      data-delivery-uae="{{ product.metafields.custom.delivery_cost | default: 'AED 18' }}"
                      data-delivery-ksa="{{ product.metafields.custom.ksa_delivery_cost | default: 'SAR 26' }}">
                  {{ product.metafields.custom.delivery_cost | default: "AED 18" }}
                </span>
              </div>
              <div class="col-total" data-label="Total Cost">
                <span class="total-cost" 
                      data-total-uae="{{ variant.price | plus: 1800 }}"
                      data-total-ksa="{{ product.metafields.custom.ksa_total_cost | default: variant.price | plus: 2600 }}">
                  {{ variant.price | plus: 1800 | money }}
                </span>
              </div>
              <div class="col-stock" data-label="Available Inventory">
                <span class="stock-count" id="stock-count-{{ variant.id }}" data-variant-id="{{ variant.id }}">Loading...</span>
              </div>
            </div>
            {% endfor %}
          </div>
        </div>

        <!-- Shipping Information Card -->
        <div class="shipping-info-card">
          <div class="shipping-header">
            <h3>Shipping Information</h3>
          </div>
          
          <div class="shipping-tiles">
            <div class="shipping-tile">
              <div class="tile-content">
                <span class="tile-label">
                  Dispatch Time
                  <span class="tooltip-icon-corner">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <circle cx="12" cy="12" r="10"></circle>
                      <line x1="12" y1="16" x2="12" y2="12"></line>
                      <line x1="12" y1="8" x2="12.01" y2="8"></line>
                    </svg>
                    <span class="tooltip-text">Time to dispatch order from our local warehouse to your customer.</span>
                  </span>
                </span>
                <span class="tile-value dispatch-time-variant" id="dispatch-time-display">
                  {{ current_variant.metafields.custom.dispatching_time | default: product.metafields.custom.dispatching_time | default: "1-2 days Processing" }}
                </span>
              </div>
            </div>
            
            <div class="shipping-tile">
              <div class="tile-content">
                <span class="tile-label">
                  Delivery Time
                  <span class="tooltip-icon-corner">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <circle cx="12" cy="12" r="10"></circle>
                      <line x1="12" y1="16" x2="12" y2="12"></line>
                      <line x1="12" y1="8" x2="12.01" y2="8"></line>
                    </svg>
                    <span class="tooltip-text">Time to deliver order to your customer after dispatch.</span>
                  </span>
                </span>
                <span class="tile-value delivery-time-variant" id="delivery-time-display">
                  <span class="delivery-time-uae" style="display: none;">1-2 days</span>
                  <span class="delivery-time-ksa" style="display: none;">1-3 days</span>
                  <span class="delivery-time-default">{{ current_variant.metafields.custom.delivery_time | default: product.metafields.custom.delivery_time | default: "3-5 days Shipping" }}</span>
                </span>
              </div>
            </div>
            
            <div class="shipping-tile">
              <div class="tile-content">
                <span class="tile-label">
                  Ships From
                  <span class="tooltip-icon-corner">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <circle cx="12" cy="12" r="10"></circle>
                      <line x1="12" y1="16" x2="12" y2="12"></line>
                      <line x1="12" y1="8" x2="12.01" y2="8"></line>
                    </svg>
                    <span class="tooltip-text">The location where this specific variant is shipped from, which may vary by product variant.</span>
                  </span>
                </span>
                <span class="tile-value shipping-from-variant" id="shipping-from-display">
                  {{ current_variant.metafields.custom.ships_from | default: product.metafields.custom.ships_from | default: "UAE" }}
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
    </div>
  </div>
</section>

<style>
  
/* Complete Product Page Styles - Fully Isolated */
.dynamic-product-page {
  margin: 0 !important;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;
  padding: 0 !important;
  border: none !important;
  background: transparent !important;
  position: relative;
  z-index: 9999;
  width: 100% !important;
  max-width: 100% !important;
  overflow-x: hidden !important;
}

/* Break out of any Shopify theme containers */
.dynamic-product-page,
.dynamic-product-page > * {
  position: relative !important;
}

/* Full viewport breakout wrapper */
.full-viewport-breakout {
  position: relative !important;
  width: 100% !important;
  max-width: 100% !important;
  overflow-x: hidden !important;
}

.dynamic-product-page *,
.dynamic-product-page *::before,
.dynamic-product-page *::after {
  box-sizing: border-box !important;
}

.dynamic-product-page > *:not(.product-description):not(.product-description *) {
  margin: 0 !important;
  padding: 0 !important;
  border: none !important;
  outline: none !important;
  text-decoration: none !important;
  list-style: none !important;
}

/* Override Shopify theme constraints */
.dynamic-product-page .container,
.dynamic-product-page .page-width,
.dynamic-product-page .wrapper,
.dynamic-product-page .main,
.dynamic-product-page .content,
.dynamic-product-page .product-page,
.dynamic-product-page .template-product,
.dynamic-product-page .shopify-section {
  max-width: none !important;
  width: 100% !important;
  margin: 0 !important;
  padding: 0 !important;
  position: relative !important;
}


.dynamic-product-page .product-layout-flex {
  display: flex !important;
  gap: 40px !important;
  width: 100% !important;
  max-width: none !important;
  margin: 0 !important;
  padding: 0 !important;
  align-items: flex-start !important;
}

.dynamic-product-page .product-image-section {
  flex: 1 !important;
  min-width: 0 !important;
}

.dynamic-product-page .product-info-section {
  flex: 1 !important;
  min-width: 0 !important;
}

@media (max-width: 768px) {
  .dynamic-product-page .product-layout-flex {
    flex-direction: column !important;
    gap: 20px !important;
  }
  
  .dynamic-product-page .product-image-section,
  .dynamic-product-page .product-info-section {
    flex: none !important;
    width: 100% !important;
  }
}

/* Product Images */
.dynamic-product-page .product-image-gallery {
  position: relative !important;
}

.dynamic-product-page .main-image-container {
  position: relative !important;
  margin-bottom: 20px !important;
}

.dynamic-product-page .main-product-image {
  width: 100% !important;
  height: auto !important;              /* preserve natural aspect ratio */
  object-fit: contain !important;      /* ensure full image is visible */
  max-height: 800px !important;        /* prevent excessively tall images */
  border-radius: 8px !important;
  background: #f8f9fa !important;
}

.dynamic-product-page .image-counter {
  position: absolute !important;
  bottom: 10px !important;
  right: 10px !important;
  background: rgba(0,0,0,0.7) !important;
  color: white !important;
  padding: 4px 8px !important;
  border-radius: 4px !important;
  font-size: 12px !important;
}

.dynamic-product-page .thumbnail-gallery {
  display: flex !important;
  gap: 10px !important;
  overflow-x: auto !important;
  padding: 5px 0 !important;
  scrollbar-width: thin !important;
}

.dynamic-product-page .thumbnail-gallery::-webkit-scrollbar {
  height: 6px !important;
}

.dynamic-product-page .thumbnail-gallery::-webkit-scrollbar-track {
  background: #f1f1f1 !important;
  border-radius: 3px !important;
}

.dynamic-product-page .thumbnail-gallery::-webkit-scrollbar-thumb {
  background: #c1c1c1 !important;
  border-radius: 3px !important;
}

.dynamic-product-page .thumbnail-gallery::-webkit-scrollbar-thumb:hover {
  background: #a8a8a8 !important;
}

.dynamic-product-page .thumbnail-item {
  width: 90px !important;
  height: 90px !important;
  border-radius: 6px !important;
  overflow: hidden !important;
  cursor: pointer !important;
  border: 2px solid transparent !important;
  transition: border-color 0.2s ease !important;
  flex-shrink: 0 !important;
}

.dynamic-product-page .thumbnail-item.active {
  border-color: #007bff !important;
}

.dynamic-product-page .thumbnail-image {
  width: 100% !important;
  height: 100% !important;
  object-fit: cover !important;
}

/* Product Information */
.dynamic-product-page .product-info-container {
  padding: 20px 0 !important;
}

.dynamic-product-page .breadcrumbs {
  margin-bottom: 20px !important;
  font-size: 14px !important;
  color: #666 !important;
}

.dynamic-product-page .breadcrumbs a {
  color: #007bff !important;
  text-decoration: none !important;
}

.dynamic-product-page .breadcrumbs a:hover {
  text-decoration: underline !important;
}

.dynamic-product-page .product-title {
  font-size: 32px !important;
  font-weight: 700 !important;
  color: #000 !important;
  margin: 0 0 10px 0 !important;
  line-height: 1.2 !important;
}

.dynamic-product-page .product-tagline {
  font-size: 18px !important;
  color: #666 !important;
  margin: 0 0 15px 0 !important;
  font-style: italic !important;
}


.dynamic-product-page .inventory-location {
  display: none !important;
  align-items: center !important;
  margin-bottom: 20px !important;
  font-size: 14px !important;
  color: #666 !important;
}

.dynamic-product-page .location-icon {
  margin-right: 8px !important;
}


/* Product Details Card */
.dynamic-product-page .product-details-card {
  background: #f8f9fa !important;
  border-radius: 8px !important;
  padding: 20px !important;
  margin-bottom: 30px !important;
  border: 1px solid #e9ecef !important;
}

.dynamic-product-page .product-details-card h3 {
  margin: 0 0 10px 0 !important;
  font-size: 18px !important;
  color: #333 !important;
}

.dynamic-product-page .product-description-container {
  position: relative !important;
}

.dynamic-product-page .product-description {
  margin: 0 !important;
  font-size: 14px;
  transition: all 0.3s ease !important;
}

/* Web view: Make description longer and scrollable */
@media (min-width: 769px) {
  .dynamic-product-page .product-description {
    max-height: 490px !important;
    overflow-y: auto !important;
    padding-right: 10px !important;
  }
  
  .dynamic-product-page .product-description::-webkit-scrollbar {
    width: 6px !important;
  }
  
  .dynamic-product-page .product-description::-webkit-scrollbar-track {
    background: #f1f1f1 !important;
    border-radius: 3px !important;
  }
  
  .dynamic-product-page .product-description::-webkit-scrollbar-thumb {
    background: #c1c1c1 !important;
    border-radius: 3px !important;
  }
  
  .dynamic-product-page .product-description::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8 !important;
  }
  
  /* Hide read more button on web view */
  .dynamic-product-page .read-more-wrapper {
    display: none !important;
  }
  
  /* Remove collapsed state on web view */
  .dynamic-product-page .product-description.collapsed {
    display: block !important;
    -webkit-line-clamp: none !important;
    -webkit-box-orient: initial !important;
    overflow: visible !important;
  }
}

/* Allow all formatting in product description */
.dynamic-product-page .product-description * {
  margin: revert !important;
  padding: revert !important;
  color: revert !important;
  list-style: revert !important;
  text-decoration: revert !important;
  font-weight: revert !important;
  font-style: revert !important;
  border: revert !important;
}

.dynamic-product-page .product-description ul,
.dynamic-product-page .product-description ol {
  margin-left: 20px !important;
  margin-top: 10px !important;
  margin-bottom: 10px !important;
  list-style: revert !important;
}

.dynamic-product-page .product-description li {
  margin-bottom: 5px !important;
  list-style: revert !important;
}

.dynamic-product-page .product-description p {
  margin-bottom: 10px !important;
}

.dynamic-product-page .product-description br {
  display: block !important;
  content: "" !important;
  margin-top: 5px !important;
}

.dynamic-product-page .product-description strong,
.dynamic-product-page .product-description b {
  font-weight: bold !important;
}

.dynamic-product-page .product-description em,
.dynamic-product-page .product-description i {
  font-style: italic !important;
}

.dynamic-product-page .product-description.collapsed {
  display: -webkit-box !important;
  -webkit-line-clamp: 3 !important;
  -webkit-box-orient: vertical !important;
  overflow: hidden !important;
}

.dynamic-product-page .read-more-wrapper {
  margin-top: 10px !important;
}

.dynamic-product-page .read-more-link {
  color: #007bff !important;
  text-decoration: none !important;
  font-size: 14px !important;
  display: inline-flex !important;
  align-items: center !important;
  cursor: pointer !important;
  transition: color 0.2s ease !important;
}

.dynamic-product-page .read-more-link:hover {
  color: #0056b3 !important;
}

.dynamic-product-page .arrow {
  margin-left: 5px !important;
  transition: transform 0.2s ease !important;
}

.dynamic-product-page .arrow.expanded {
  transform: rotate(180deg) !important;
}

/* Full Width Sections */
.dynamic-product-page .full-width-sections {
  width: 100% !important;
  max-width: 100% !important;
  background: #ffffff !important;
  padding: 40px 0 !important;
  margin: 0 !important;
  position: relative !important;
  box-sizing: border-box !important;
  overflow-x: hidden !important;
}

.dynamic-product-page .full-width-container {
  max-width: 1400px !important;
  margin: 0 auto !important;
  padding: 0 40px !important;
  width: 100% !important;
}

/* Main Tabs */
.dynamic-product-page .main-tabs {
  display: flex !important;
  justify-content: center !important;
  margin-bottom: 40px !important;
  border-bottom: 1px solid #e9ecef !important;
  padding: 0 20px !important;
}

.dynamic-product-page .tab-btn {
  padding: 12px 24px !important;
  border: none !important;
  background: transparent !important;
  cursor: pointer !important;
  font-size: 18px !important;
  font-weight: 700 !important;
  color: #666 !important;
  border-bottom: 2px solid transparent !important;
  transition: all 0.2s ease !important;
  position: relative !important;
  display: flex !important;
  flex-direction: column !important;
  align-items: center !important;
  gap: 4px !important;
}

.dynamic-product-page .tab-btn.active {
  color: #142C73 !important;
  border-bottom-color: #142C73 !important;
}

/* Enhanced tab styling for web view */
@media (min-width: 769px) {
  .dynamic-product-page .tab-btn {
    position: relative !important;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%) !important;
    border: 1px solid #dee2e6 !important;
    border-radius: 8px 8px 0 0 !important;
    margin: 0 4px !important;
    transition: all 0.3s ease !important;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
    font-size: 18px !important;
    font-weight: 700 !important;
  }
  
  .dynamic-product-page .tab-btn:hover {
    background: linear-gradient(135deg, #e9ecef 0%, #dee2e6 100%) !important;
    transform: translateY(-2px) !important;
    box-shadow: 0 4px 8px rgba(0,0,0,0.15) !important;
  }
  
  .dynamic-product-page .tab-btn.active {
    background: linear-gradient(135deg, #142C73 0%, #1a3a8a 100%) !important;
    color: white !important;
    border-color: #142C73 !important;
    transform: translateY(-3px) !important;
    box-shadow: 0 6px 12px rgba(20, 44, 115, 0.3) !important;
    z-index: 10 !important;
  }
  
  .dynamic-product-page .tab-btn.active::before {
    content: '' !important;
    position: absolute !important;
    top: 100% !important;
    left: 0 !important;
    right: 0 !important;
    height: 3px !important;
    background: linear-gradient(90deg, #142C73 0%, #1a3a8a 100%) !important;
    border-radius: 0 0 3px 3px !important;
  }
  
  .dynamic-product-page .tab-btn:disabled {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%) !important;
    color: #6c757d !important;
    border-color: #dee2e6 !important;
    opacity: 0.6 !important;
    cursor: not-allowed !important;
    transform: none !important;
    box-shadow: 0 1px 2px rgba(0,0,0,0.05) !important;
  }
  
  .dynamic-product-page .tab-btn:disabled:hover {
    transform: none !important;
    box-shadow: 0 1px 2px rgba(0,0,0,0.05) !important;
  }
  
  .dynamic-product-page .coming-soon-badge {
    background: linear-gradient(135deg, #ffc107 0%, #ffb300 100%) !important;
    color: #000 !important;
    padding: 2px 8px !important;
    border-radius: 12px !important;
    font-size: 9px !important;
    font-weight: 600 !important;
    text-transform: uppercase !important;
    letter-spacing: 0.3px !important;
    margin-top: 4px !important;
    align-self: center !important;
    box-shadow: 0 2px 4px rgba(255, 193, 7, 0.3) !important;
  }
}

.dynamic-product-page .tab-btn:disabled {
  cursor: not-allowed !important;
  opacity: 0.6 !important;
}

.dynamic-product-page .coming-soon-badge {
  background: #ffc107 !important;
  color: #000 !important;
  padding: 1px 6px !important;
  border-radius: 8px !important;
  font-size: 9px !important;
  font-weight: 600 !important;
  text-transform: uppercase !important;
  letter-spacing: 0.3px !important;
  margin-left: 8px !important;
  align-self: flex-start !important;
}

/* Dropshipping Information */
.dynamic-product-page .dropshipping-info {
  background: #f8f9fa !important;
  border-radius: 8px !important;
  padding: 30px !important;
  margin-bottom: 30px !important;
}

/* Compact dropshipping container for web view */
@media (min-width: 769px) {
  .dynamic-product-page .dropshipping-info {
    padding: 15px 30px !important;
    margin-bottom: 15px !important;
  }
}

.dynamic-product-page .info-header {
  display: flex !important;
  align-items: center !important;
  margin-bottom: 15px !important;
}

.dynamic-product-page .info-icon {
  margin-right: 10px !important;
  font-size: 18px !important;
}

.dynamic-product-page .info-header h3 {
  margin: 0 !important;
  font-size: 18px !important;
  color: #333 !important;
}

.dynamic-product-page .select-country {
  margin-bottom: 20px !important;
}

.dynamic-product-page .country-label {
  font-weight: 500 !important;
  color: #333 !important;
  display: block !important;
  margin-bottom: 12px !important;
  font-size: 14px !important;
}

.dynamic-product-page .country-selection {
  display: flex !important;
  gap: 12px !important;
  flex-wrap: wrap !important;
}

/* Variant Box Buttons */
.dynamic-product-page .variant-box-btn {
  padding: 12px 20px !important;
  border: 2px solid #e3f2fd !important;
  background: white !important;
  border-radius: 8px !important;
  cursor: pointer !important;
  font-size: 14px !important;
  font-weight: 500 !important;
  color: #142C73 !important;
  transition: all 0.2s ease !important;
  min-width: 80px !important;
  text-align: center !important;
  position: relative !important;
}

.dynamic-product-page .variant-box-btn:hover {
  border-color: #142C73 !important;
  background: #f5f5f5 !important;
}

.dynamic-product-page .variant-box-btn.selected {
  background: #142C73 !important;
  color: white !important;
  border-color: #142C73 !important;
  box-shadow: 0 2px 4px rgba(20, 44, 115, 0.2) !important;
}

.dynamic-product-page .variant-box-btn[data-selected="true"] {
  background: #142C73 !important;
  color: white !important;
  border-color: #142C73 !important;
  box-shadow: 0 2px 4px rgba(20, 44, 115, 0.2) !important;
}

/* Variant Selection Section */
.dynamic-product-page .variant-selection-section {
  margin-top: 20px !important;
  padding-top: 20px !important;
  border-top: 1px solid #e9ecef !important;
}

.dynamic-product-page .variant-option-group {
  margin-bottom: 20px !important;
}

.dynamic-product-page .variant-option-label {
  display: block !important;
  font-weight: 500 !important;
  color: #333 !important;
  margin-bottom: 12px !important;
  font-size: 14px !important;
}

.dynamic-product-page .variant-boxes-container {
  display: flex !important;
  gap: 12px !important;
  flex-wrap: wrap !important;
}

.dynamic-product-page .variant-box-btn:disabled {
  opacity: 0.5 !important;
  cursor: not-allowed !important;
}

.dynamic-product-page .variant-box-btn:disabled:hover {
  border-color: #e3f2fd !important;
  background: white !important;
}

/* Market Insights Card */
.dynamic-product-page .market-insights-card {
  background: #f8f9fa !important;
  border-radius: 8px !important;
  padding: 30px !important;
  margin-bottom: 30px !important;
  border: 1px solid #e9ecef !important;
}

.dynamic-product-page .insights-header {
  display: flex !important;
  align-items: center !important;
  margin-bottom: 20px !important;
}

.dynamic-product-page .insights-icon {
  margin-right: 10px !important;
  font-size: 18px !important;
}

.dynamic-product-page .insights-header h3 {
  margin: 0 !important;
  font-size: 18px !important;
  color: #333 !important;
}

.dynamic-product-page .insights-grid {
  display: grid !important;
  grid-template-columns: repeat(4, 1fr) !important;
  gap: 15px !important;
}

/* Tablet Market Insights */
@media (max-width: 1024px) and (min-width: 769px) {
  .dynamic-product-page .insights-grid {
    grid-template-columns: repeat(2, 1fr) !important;
  }
}

/* Mobile Market Insights */
@media (max-width: 768px) {
  .dynamic-product-page .insights-grid {
    display: flex !important;
    overflow-x: auto !important;
    gap: 10px !important;
    padding: 10px 0 !important;
    scroll-behavior: smooth !important;
    -webkit-overflow-scrolling: touch !important;
    flex-wrap: nowrap !important;
  }
  
  .dynamic-product-page .insight-item {
    flex: 0 0 calc(50% - 5px) !important;
    min-width: calc(50% - 5px) !important;
  }
  
  .dynamic-product-page .insights-grid::-webkit-scrollbar {
    height: 4px !important;
  }
  
  .dynamic-product-page .insights-grid::-webkit-scrollbar-track {
    background: #f1f1f1 !important;
    border-radius: 2px !important;
  }
  
  .dynamic-product-page .insights-grid::-webkit-scrollbar-thumb {
    background: #c1c1c1 !important;
    border-radius: 2px !important;
  }
}

.dynamic-product-page .insight-item {
  display: flex !important;
  flex-direction: column !important;
  align-items: center !important;
  justify-content: center !important;
  gap: 5px !important;
  padding: 15px !important;
  padding-top: 20px !important;
  background: white !important;
  border-radius: 6px !important;
  border: 1px solid #e9ecef !important;
  text-align: center !important;
  position: relative !important;
}

.dynamic-product-page .insight-icon {
  font-size: 16px !important;
}

.dynamic-product-page .insight-content {
  display: flex !important;
  flex-direction: column !important;
  align-items: center !important;
  gap: 3px !important;
  width: 100% !important;
}

.dynamic-product-page .insight-label {
  font-size: 12px !important;
  color: #666 !important;
  font-weight: 500 !important;
  text-align: center !important;
}

/* Enhanced text sizes for web view - consistent across all tiles */
@media (min-width: 769px) {
  /* Market Insights Tiles */
  .dynamic-product-page .insight-label {
    font-size: 14px !important;
  }
  
  .dynamic-product-page .insight-value {
    font-size: 16px !important;
  }
  
  /* Selected Variant Information Tiles */
  .dynamic-product-page .variant-name {
    font-size: 18px !important;
    font-weight: 600 !important;
  }
  
  .dynamic-product-page .sku-code {
    font-size: 16px !important;
  }
  
  .dynamic-product-page .product-price {
    font-size: 16px !important;
  }
  
  .dynamic-product-page .delivery-cost {
    font-size: 16px !important;
  }
  
  .dynamic-product-page .total-cost {
    font-size: 18px !important;
    font-weight: 600 !important;
  }
  
  .dynamic-product-page .stock-count {
    font-size: 16px !important;
  }
  
  /* Shipping Information Tiles */
  .dynamic-product-page .tile-label {
    font-size: 16px !important;
  }
  
  .dynamic-product-page .tile-value {
    font-size: 18px !important;
  }
  
  /* Dropshipping Information Tiles */
  .dynamic-product-page .country-label {
    font-size: 16px !important;
  }
  
  .dynamic-product-page .variant-option-label {
    font-size: 16px !important;
  }
  
  .dynamic-product-page .variant-box-btn {
    font-size: 16px !important;
  }
}

/* Tooltip Icon in Top-Right Corner */
.dynamic-product-page .tooltip-icon-corner {
  position: absolute !important;
  top: 8px !important;
  right: 8px !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  cursor: pointer !important;
  color: #999 !important;
  transition: color 0.2s ease !important;
  z-index: 10 !important;
}

.dynamic-product-page .tooltip-icon-corner svg {
  display: block !important;
}

.dynamic-product-page .tooltip-icon-corner.active {
  color: #333 !important;
}

.dynamic-product-page .tooltip-text {
  visibility: hidden !important;
  opacity: 0 !important;
  width: 240px !important;
  background-color: #333 !important;
  color: #fff !important;
  text-align: left !important;
  border-radius: 6px !important;
  padding: 12px !important;
  position: absolute !important;
  z-index: 1000 !important;
  top: 30px !important;
  right: 0 !important;
  font-size: 11px !important;
  line-height: 1.5 !important;
  font-weight: 400 !important;
  transition: opacity 0.3s ease, visibility 0.3s ease !important;
  box-shadow: 0 4px 12px rgba(0,0,0,0.15) !important;
  pointer-events: none !important;
}

.dynamic-product-page .tooltip-text::before {
  content: "" !important;
  position: absolute !important;
  bottom: 100% !important;
  right: 8px !important;
  border-width: 6px !important;
  border-style: solid !important;
  border-color: transparent transparent #333 transparent !important;
}

.dynamic-product-page .tooltip-icon-corner.active .tooltip-text {
  visibility: visible !important;
  opacity: 1 !important;
}

.dynamic-product-page .insight-value {
  font-size: 14px !important;
  font-weight: 600 !important;
  color: #333 !important;
  text-align: center !important;
}

.dynamic-product-page .saturation-low {
  background: #d4edda !important;
  color: #155724 !important;
  padding: 2px 8px !important;
  border-radius: 12px !important;
  font-size: 12px !important;
}

.dynamic-product-page .delivery-success {
  background: #cce5ff !important;
  color: #004085 !important;
  padding: 2px 8px !important;
  border-radius: 12px !important;
  font-size: 12px !important;
}

.dynamic-product-page .dispatch-time {
  background: #cce5ff !important;
  color: #004085 !important;
  padding: 2px 8px !important;
  border-radius: 12px !important;
  font-size: 12px !important;
  animation: blink 2s infinite !important;
}

.dynamic-product-page .delivery-time {
  background: #d4edda !important;
  color: #155724 !important;
  padding: 2px 8px !important;
  border-radius: 12px !important;
  font-size: 12px !important;
  animation: blink 2s infinite !important;
}

@keyframes blink {
  0%, 50% {
    opacity: 1;
  }
  25%, 75% {
    opacity: 0.4;
  }
}

.dynamic-product-page .roas {
  background: #fff3cd !important;
  color: #856404 !important;
  padding: 2px 8px !important;
  border-radius: 12px !important;
  font-size: 12px !important;
}

.dynamic-product-page .suggested-selling-price {
  background: #e7f3ff !important;
  color: #0066cc !important;
  padding: 2px 8px !important;
  border-radius: 12px !important;
  font-size: 12px !important;
  font-weight: 600 !important;
}

/* Variants Card */
.dynamic-product-page .variants-card {
  background: #f8f9fa !important;
  border-radius: 8px !important;
  padding: 30px !important;
  border: 1px solid #e9ecef !important;
}

.dynamic-product-page .variants-header {
  display: flex !important;
  align-items: center !important;
  margin-bottom: 20px !important;
}

.dynamic-product-page .variants-icon {
  margin-right: 10px !important;
  font-size: 18px !important;
}

.dynamic-product-page .variants-header h3 {
  margin: 0 !important;
  font-size: 18px !important;
  color: #333 !important;
}

.dynamic-product-page .variants-table {
  background: white !important;
  border-radius: 6px !important;
  overflow: hidden !important;
  border: 1px solid #e9ecef !important;
}

.dynamic-product-page .table-header {
  display: grid !important;
  grid-template-columns: 1.5fr 1.2fr 1fr 1fr 1fr 1fr !important;
  background: #f8f9fa !important;
  padding: 10px 15px !important;
  font-weight: 600 !important;
  font-size: 14px !important;
  color: #333 !important;
  border-bottom: 1px solid #e9ecef !important;
}

.dynamic-product-page .table-header > div {
  text-align: center !important;
}

/* Hide table header on mobile */
@media (max-width: 768px) {
  .dynamic-product-page .table-header {
    display: none !important;
  }
  
  /* Mobile improvements */
  .dynamic-product-page .full-width-container {
    padding: 0 20px !important;
  }
  
  .dynamic-product-page .product-title {
    font-size: 24px !important;
  }
  
  .dynamic-product-page .main-product-image {
    height: auto !important;
    max-height: 600px !important;
  }
  
  /* Reduce spacing between product description and tabs on mobile */
  .dynamic-product-page .product-info-container {
    padding: 20px 0 0 0 !important;
  }
  
  .dynamic-product-page .product-details-card {
    margin-bottom: 0 !important;
    padding-bottom: 10px !important;
  }
  
  .dynamic-product-page .full-width-sections {
    padding: 10px 0 !important;
  }
  
  .dynamic-product-page .full-width-sections:first-of-type {
    padding-top: 0 !important;
  }
  
  .dynamic-product-page .main-tabs {
    padding: 0 10px !important;
    margin-bottom: 20px !important;
  }
  
  .dynamic-product-page .tab-btn {
    padding: 10px 16px !important;
    font-size: 16px !important;
    font-weight: 700 !important;
    position: relative !important;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%) !important;
    border: 1px solid #dee2e6 !important;
    border-radius: 8px 8px 0 0 !important;
    margin: 0 2px !important;
    transition: all 0.3s ease !important;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
  }
  
  .dynamic-product-page .tab-btn:hover {
    background: linear-gradient(135deg, #e9ecef 0%, #dee2e6 100%) !important;
    transform: translateY(-2px) !important;
    box-shadow: 0 4px 8px rgba(0,0,0,0.15) !important;
  }
  
  .dynamic-product-page .tab-btn.active {
    background: linear-gradient(135deg, #142C73 0%, #1a3a8a 100%) !important;
    color: white !important;
    border-color: #142C73 !important;
    transform: translateY(-3px) !important;
    box-shadow: 0 6px 12px rgba(20, 44, 115, 0.3) !important;
    z-index: 10 !important;
  }
  
  .dynamic-product-page .tab-btn.active::before {
    content: '' !important;
    position: absolute !important;
    top: 100% !important;
    left: 0 !important;
    right: 0 !important;
    height: 3px !important;
    background: linear-gradient(90deg, #142C73 0%, #1a3a8a 100%) !important;
    border-radius: 0 0 3px 3px !important;
  }
  
  .dynamic-product-page .tab-btn:disabled {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%) !important;
    color: #6c757d !important;
    border-color: #dee2e6 !important;
    opacity: 0.6 !important;
    cursor: not-allowed !important;
    transform: none !important;
    box-shadow: 0 1px 2px rgba(0,0,0,0.05) !important;
  }
  
  .dynamic-product-page .tab-btn:disabled:hover {
    transform: none !important;
    box-shadow: 0 1px 2px rgba(0,0,0,0.05) !important;
  }
  
  .dynamic-product-page .coming-soon-badge {
    background: linear-gradient(135deg, #ffc107 0%, #ffb300 100%) !important;
    color: #000 !important;
    padding: 2px 8px !important;
    border-radius: 12px !important;
    font-size: 8px !important;
    font-weight: 600 !important;
    text-transform: uppercase !important;
    letter-spacing: 0.3px !important;
    margin-top: 4px !important;
    align-self: center !important;
    box-shadow: 0 2px 4px rgba(255, 193, 7, 0.3) !important;
  }
  
  .dynamic-product-page .country-selection {
    gap: 8px !important;
  }
  
  .dynamic-product-page .select-country {
    margin-bottom: 15px !important;
  }
  
  .dynamic-product-page .country-label {
    font-size: 13px !important;
    margin-bottom: 10px !important;
  }
  
  .dynamic-product-page .variant-selection-section {
    margin-top: 15px !important;
    padding-top: 15px !important;
  }
  
  .dynamic-product-page .variant-option-group {
    margin-bottom: 5px !important;
  }
  
  .dynamic-product-page .variant-option-group:last-child {
    margin-bottom: 0 !important;
  }
  
  .dynamic-product-page .variant-option-label {
    font-size: 13px !important;
    margin-bottom: 10px !important;
  }
  
  .dynamic-product-page .variant-boxes-container {
    gap: 8px !important;
  }
  
  .dynamic-product-page .variant-box-btn {
    padding: 10px 16px !important;
    font-size: 13px !important;
    min-width: 70px !important;
  }
  
  .dynamic-product-page .tab-btn {
    padding: 10px 16px !important;
    font-size: 14px !important;
    gap: 6px !important;
  }
  
  .dynamic-product-page .coming-soon-badge {
    font-size: 8px !important;
    padding: 1px 4px !important;
    margin-left: 6px !important;
  }
}

.dynamic-product-page .table-row {
  display: none !important;
  grid-template-columns: 1.5fr 1.2fr 1fr 1fr 1fr 1fr !important;
  padding: 15px !important;
  border-bottom: 1px solid #f1f3f4 !important;
  align-items: center !important;
}

.dynamic-product-page .table-row.visible {
  display: grid !important;
}

.dynamic-product-page .table-row > div {
  text-align: center !important;
}

.dynamic-product-page .table-row:last-child {
  border-bottom: none !important;
}

.dynamic-product-page .variant-name {
  font-weight: 500 !important;
  color: #333 !important;
  display: block !important;
  margin-bottom: 5px !important;
  font-size: 14px !important;
}

.dynamic-product-page .popular-badge {
  background: #28a745 !important;
  color: white !important;
  padding: 2px 8px !important;
  border-radius: 12px !important;
  font-size: 11px !important;
  font-weight: 500 !important;
}

.dynamic-product-page .sku-code {
  font-family: monospace !important;
  font-size: 14px !important;
  color: #666 !important;
}

.dynamic-product-page .price-container {
  display: flex !important;
  flex-direction: column !important;
  align-items: center !important;
  gap: 2px !important;
}

.dynamic-product-page .compare-at-price {
  margin-bottom: 2px !important;
}

.dynamic-product-page .compare-price {
  color: #999 !important;
  font-size: 12px !important;
  text-decoration: line-through !important;
  font-weight: 400 !important;
}

.dynamic-product-page .product-price {
  color: #28a745 !important;
  font-weight: 500 !important;
  font-size: 14px !important;
}

/* Enhanced compare price styling for web view */
@media (min-width: 769px) {
  .dynamic-product-page .compare-price {
    font-size: 14px !important;
  }
  
  .dynamic-product-page .product-price {
    font-size: 16px !important;
  }
}

.dynamic-product-page .delivery-cost {
  color: #666 !important;
  font-size: 14px !important;
  font-weight: 500 !important;
}

.dynamic-product-page .total-cost {
  color: #007bff !important;
  font-weight: 500 !important;
  font-size: 14px !important;
}

.dynamic-product-page .suggested-price {
  color: #666 !important;
  font-style: italic !important;
}

.dynamic-product-page .stock-count {
  color: #28a745 !important;
  font-weight: 500 !important;
  font-size: 14px !important;
}

.dynamic-product-page .shipping-from {
  color: #666 !important;
  font-size: 14px !important;
  font-weight: 500 !important;
}

/* Shipping Information Card */
.dynamic-product-page .shipping-info-card {
  background: #f8f9fa !important;
  border-radius: 8px !important;
  padding: 30px !important;
  margin-top: 30px !important;
  border: 1px solid #e9ecef !important;
}

.dynamic-product-page .shipping-header {
  display: flex !important;
  align-items: center !important;
  margin-bottom: 20px !important;
}

.dynamic-product-page .shipping-icon {
  margin-right: 10px !important;
  font-size: 18px !important;
}

.dynamic-product-page .shipping-header h3 {
  margin: 0 !important;
  font-size: 18px !important;
  color: #333 !important;
}

.dynamic-product-page .shipping-tiles {
  display: grid !important;
  grid-template-columns: repeat(3, 1fr) !important;
  gap: 20px !important;
}

.dynamic-product-page .shipping-tile {
  position: relative !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  padding: 20px !important;
  background: white !important;
  border-radius: 8px !important;
  border: 1px solid #e9ecef !important;
}

.dynamic-product-page .tile-content {
  display: flex !important;
  flex-direction: column !important;
  gap: 8px !important;
  align-items: center !important;
  text-align: center !important;
}

.dynamic-product-page .tile-label {
  font-size: 14px !important;
  color: #666 !important;
  font-weight: 500 !important;
  text-align: center !important;
}

.dynamic-product-page .tile-value {
  font-size: 16px !important;
  font-weight: 600 !important;
  color: #333 !important;
  text-align: center !important;
}

.dynamic-product-page .tile-value.dispatch-time,
.dynamic-product-page .tile-value.dispatch-time-variant {
  background: #cce5ff !important;
  color: #004085 !important;
  padding: 6px 12px !important;
  border-radius: 12px !important;
  animation: blink 2s infinite !important;
}

.dynamic-product-page .tile-value.delivery-time,
.dynamic-product-page .tile-value.delivery-time-variant {
  background: #d4edda !important;
  color: #155724 !important;
  padding: 6px 12px !important;
  border-radius: 12px !important;
  animation: blink 2s infinite !important;
}

@media (max-width: 768px) {
  /* Shipping Tiles Mobile */
  .dynamic-product-page .shipping-tiles {
    grid-template-columns: 1fr !important;
    gap: 15px !important;
  }
  
  .dynamic-product-page .shipping-tile {
    padding: 15px !important;
  }
  
  /* Mobile Variants Card Layout */
  .dynamic-product-page .variants-table {
    display: flex !important;
    overflow-x: auto !important;
    gap: 10px !important;
    padding: 5px 0 !important;
    scroll-behavior: smooth !important;
    -webkit-overflow-scrolling: touch !important;
  }
  
  .dynamic-product-page .table-row {
    flex: 0 0 calc(100% - 10px) !important;
    min-width: calc(100% - 10px) !important;
    display: block !important;
    padding: 0 !important;
    border: none !important;
    background: transparent !important;
    box-shadow: none !important;
    margin-bottom: 0 !important;
  }
  
  .dynamic-product-page .table-row.visible {
    display: block !important;
  }
  
  .dynamic-product-page .variants-table::-webkit-scrollbar {
    height: 4px !important;
  }
  
  .dynamic-product-page .variants-table::-webkit-scrollbar-track {
    background: #f1f1f1 !important;
    border-radius: 2px !important;
  }
  
  .dynamic-product-page .variants-table::-webkit-scrollbar-thumb {
    background: #c1c1c1 !important;
    border-radius: 2px !important;
  }
  
  /* Product Info Card */
  .dynamic-product-page .table-row .col-variant {
    background: #f8f9fa !important;
    padding: 10px !important;
    border-radius: 8px 8px 0 0 !important;
    margin-bottom: 0 !important;
    border-bottom: 1px solid #e9ecef !important;
  }
  
  .dynamic-product-page .table-row .col-variant::before {
    content: "" !important;
  }
  
  .dynamic-product-page .table-row .col-variant .variant-name {
    font-size: 15px !important;
    font-weight: 600 !important;
    color: #333 !important;
    text-align: center !important;
    margin: 0 !important;
  }
  
  /* Details Card */
  .dynamic-product-page .table-row .col-sku,
  .dynamic-product-page .table-row .col-price,
  .dynamic-product-page .table-row .col-delivery,
  .dynamic-product-page .table-row .col-total,
  .dynamic-product-page .table-row .col-stock {
    background: white !important;
    padding: 8px 12px !important;
    border-radius: 0 !important;
    margin-bottom: 0 !important;
    border-bottom: 1px solid #f1f3f4 !important;
    display: flex !important;
    justify-content: space-between !important;
    align-items: center !important;
  }
  
  .dynamic-product-page .table-row .col-stock {
    border-bottom: none !important;
    border-radius: 0 0 8px 8px !important;
  }
  
  /* Label styling */
  .dynamic-product-page .table-row .col-sku::before,
  .dynamic-product-page .table-row .col-price::before,
  .dynamic-product-page .table-row .col-delivery::before,
  .dynamic-product-page .table-row .col-total::before,
  .dynamic-product-page .table-row .col-stock::before {
    content: attr(data-label) ": " !important;
    font-weight: 500 !important;
    color: #333 !important;
    font-size: 13px !important;
  }
  
  /* Value styling */
  .dynamic-product-page .table-row .col-sku .sku-code,
  .dynamic-product-page .table-row .col-price .product-price,
  .dynamic-product-page .table-row .col-delivery .delivery-cost,
  .dynamic-product-page .table-row .col-stock .stock-count {
    font-weight: 500 !important;
    color: #666 !important;
    font-size: 13px !important;
  }
  
  /* Total cost special styling */
  .dynamic-product-page .table-row .col-total .total-cost {
    font-size: 16px !important;
    font-weight: 700 !important;
    color: #28a745 !important;
  }
  
  .dynamic-product-page .table-row .col-total::before {
    content: "Total Cost" !important;
    font-size: 16px !important;
    font-weight: 600 !important;
    color: #333 !important;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  
  // Variant selection functionality
  let selectedCountry = null; // No default country
  let selectedVariants = {}; // Store selected variant values
  
  // Load variant data from JSON
  const variantDataElement = document.getElementById('variant-data');
  const allVariants = variantDataElement ? JSON.parse(variantDataElement.textContent) : [];
  
  // Find which option is the country option (if exists)
  let countryOptionPosition = null;
  allVariants.forEach(variant => {
    for (let i = 1; i <= 3; i++) {
      const optionValue = variant[`option${i}`];
      if (optionValue && (optionValue.toLowerCase().includes('uae') || optionValue.toLowerCase().includes('ksa') || optionValue.toLowerCase().includes('saudi'))) {
        countryOptionPosition = i;
        break;
      }
    }
    if (countryOptionPosition) return;
  });
  
  // Initialize variant box selection
  function initializeVariantBoxes() {
    const variantBoxContainers = document.querySelectorAll('.dynamic-product-page .variant-boxes-container');
    
    variantBoxContainers.forEach(container => {
      const position = container.dataset.optionPosition;
      const buttons = container.querySelectorAll('.variant-box-btn');
      
      buttons.forEach(button => {
        button.addEventListener('click', function() {
          // Remove selected state from all buttons in this container
          buttons.forEach(btn => {
            btn.classList.remove('selected');
            btn.removeAttribute('data-selected');
          });
          
          // Add selected state to clicked button
          this.classList.add('selected');
          this.setAttribute('data-selected', 'true');
          
          // Update selected variant value
          selectedVariants[position] = this.dataset.optionValue;
          
          // Trigger filtering
          filterAndDisplay();
        });
      });
      
      // Set initial selection
      const selectedButton = container.querySelector('[data-selected="true"]');
      if (selectedButton) {
        selectedVariants[position] = selectedButton.dataset.optionValue;
        selectedButton.classList.add('selected');
      }
    });
  }
  
  // Initialize on page load
  initializeVariantBoxes();
  
  // Initial call to set up the display (if no country options, show first variant)
  if (!countryOptionPosition) {
    filterAndDisplay();
  }
  
  // Initialize delivery time display
  updateDeliveryTimeByCountry(selectedCountry);
  
  function filterAndDisplay() {
    // Hide all variant rows first - ensure only selected variant is shown
    const allRows = document.querySelectorAll('.dynamic-product-page .table-row[data-variant-id]');
    allRows.forEach(row => {
      row.classList.remove('visible');
    });
    
    // If product has country options and no country selected, don't show anything
    if (countryOptionPosition && !selectedCountry) {
      return;
    }
    
    // Filter variants based on selected country (if applicable)
    let filteredVariants = allVariants.filter(variant => {
      // Filter by country only if country option exists AND country is selected
      if (countryOptionPosition && selectedCountry) {
        const variantCountry = variant[`option${countryOptionPosition}`];
        if (!variantCountry || !variantCountry.toLowerCase().includes(selectedCountry)) {
          return false;
        }
      }
      return true;
    });
    
    // Update variant box availability based on filtered variants
    const variantBoxContainers = document.querySelectorAll('.dynamic-product-page .variant-boxes-container');
    
    variantBoxContainers.forEach(container => {
      const currentPosition = container.dataset.optionPosition;
      const availableOptions = new Set();
      
      filteredVariants.forEach(variant => {
        // Check if this variant matches all OTHER selected options
        let matches = true;
        Object.keys(selectedVariants).forEach(otherPosition => {
          if (otherPosition !== currentPosition && selectedVariants[otherPosition]) {
            const variantOption = variant[`option${otherPosition}`];
            if (variantOption !== selectedVariants[otherPosition]) {
              matches = false;
            }
          }
        });
        
        if (matches) {
          const optionValue = variant[`option${currentPosition}`];
          if (optionValue) {
            availableOptions.add(optionValue);
          }
        }
      });
      
      // Update button availability
      const buttons = container.querySelectorAll('.variant-box-btn');
      buttons.forEach(button => {
        const optionValue = button.dataset.optionValue;
        if (availableOptions.has(optionValue)) {
          button.disabled = false;
        } else {
          button.disabled = true;
          // If current selection is not available, clear it
          if (selectedVariants[currentPosition] === optionValue) {
            button.classList.remove('selected');
            button.removeAttribute('data-selected');
            delete selectedVariants[currentPosition];
          }
        }
      });
      
      // Auto-select first available option if no current selection
      if (!selectedVariants[currentPosition]) {
        const firstAvailable = Array.from(availableOptions)[0];
        if (firstAvailable) {
          const firstButton = container.querySelector(`[data-option-value="${firstAvailable}"]`);
          if (firstButton) {
            // Remove selected state from all buttons in this container
            buttons.forEach(btn => {
              btn.classList.remove('selected');
              btn.removeAttribute('data-selected');
            });
            
            // Add selected state to first available button
            firstButton.classList.add('selected');
            firstButton.setAttribute('data-selected', 'true');
            selectedVariants[currentPosition] = firstAvailable;
          }
        }
      }
    });
    
    // Find the single matching variant based on ALL selected filters
    const matchingVariant = filteredVariants.find(variant => {
      let matches = true;
      
      // Must match all selected variant options
      Object.keys(selectedVariants).forEach(position => {
        const optionKey = `option${position}`;
        if (variant[optionKey] !== selectedVariants[position]) {
          matches = false;
        }
      });
      
      return matches;
    });
    
    // Show matching variant row for desktop, all rows for mobile slider
    if (matchingVariant) {
      allRows.forEach(row => {
        const variantId = row.dataset.variantId;
        // Use loose equality to handle string/number comparison
        if (variantId == matchingVariant.id) {
          row.classList.add('visible');
        }
      });
      
      // Update dispatch and delivery times for the selected variant
      updateShippingTimes(matchingVariant);
      // Update suggested selling price range for the selected variant
      updateSuggestedSellingRange(selectedCountry || null);
    }
    
    // For mobile, show all variant rows in slider
    if (window.innerWidth <= 768) {
      allRows.forEach(row => {
        row.style.display = 'block';
      });
    }
  }
  
  // Function to update shipping times based on selected variant
  function updateShippingTimes(variant) {
    const dispatchTimeDisplay = document.getElementById('dispatch-time-display');
    const deliveryTimeDisplay = document.getElementById('delivery-time-display');
    const shippingFromDisplay = document.getElementById('shipping-from-display');
    
    if (dispatchTimeDisplay && variant) {
      dispatchTimeDisplay.textContent = variant.dispatchTime;
      
      if (deliveryTimeDisplay) {
        // Hide all delivery time options first
        const uaeTime = deliveryTimeDisplay.querySelector('.delivery-time-uae');
        const ksaTime = deliveryTimeDisplay.querySelector('.delivery-time-ksa');
        const defaultTime = deliveryTimeDisplay.querySelector('.delivery-time-default');
        
        if (uaeTime) uaeTime.style.display = 'none';
        if (ksaTime) ksaTime.style.display = 'none';
        if (defaultTime) defaultTime.style.display = 'none';
        
        // Show appropriate delivery time based on country
        const selectedCountry = document.querySelector('.variant-box-btn.selected')?.getAttribute('data-country');
        if (selectedCountry === 'uae' && uaeTime) {
          uaeTime.style.display = 'inline';
        } else if (selectedCountry === 'ksa' && ksaTime) {
          ksaTime.style.display = 'inline';
        } else if (defaultTime) {
          defaultTime.style.display = 'inline';
        }
      }
      
      if (shippingFromDisplay && variant.variantLocation) {
        shippingFromDisplay.textContent = variant.variantLocation;
      }
    }
  }
  
  // Function to get inventory from metafields
  function getInventoryForVariant(variantId) {
    console.log('Getting inventory for variant:', variantId);
    
    // Get inventory from variant metafields or use default range
    const defaultMin = 103;
    const defaultMax = 596;
    const displayCap = 600;
    
    // Find the variant in our variant data
    const variant = allVariants.find(v => v.id == variantId);
    if (!variant) {
      console.log('Variant not found in data');
      return 'N/A';
    }
    
    // Get inventory range from metafields or use defaults
    const min = variant.inventoryMin || defaultMin;
    const max = variant.inventoryMax || defaultMax;
    const range = max - min + 1;
    
    // Generate inventory using the same algorithm as your script
    const driftCadence = 'daily';
    const periodStr = driftCadence === 'weekly' ? 
      new Date().toISOString().slice(0, 4) + Math.ceil(new Date().getDate() / 7) :
      new Date().toISOString().slice(0, 4) + new Date().getDay();
    const periodNum = parseInt(periodStr);
    
    const seedExtra = variant.inventorySeed || 0;
    const handleSalt = '{{ product.handle }}'.length;
    
    // Baseline hash
    let h1 = variant.id * 48271 + 1;
    h1 = h1 + handleSalt + seedExtra;
    const baseOffset = h1 % range;
    const baseline = baseOffset + min;
    
    // Drift calculation
    let h2 = periodNum * 1013904223 + variant.id + seedExtra;
    const driftPercentWhole = h2 % 11;
    const driftPercentSigned = driftPercentWhole - 5;
    
    const driftBase = baseline * 100;
    const driftFactor = 100 + driftPercentSigned;
    const drifted = Math.floor((driftBase * driftFactor) / 10000);
    
    let inventory;
    if (drifted < min) {
      inventory = min;
    } else if (drifted > max) {
      inventory = max;
    } else {
      inventory = drifted;
    }
    
    // Apply cap if needed
    const displayValue = (displayCap && inventory > displayCap) ? (displayCap + '+') : inventory;
    return displayValue.toString();
  }
  
  // Function to update all inventory displays
  function updateInventoryDisplays() {
    const stockElements = document.querySelectorAll('.stock-count[data-variant-id]');
    
    stockElements.forEach(element => {
      const variantId = element.dataset.variantId;
      const inventory = getInventoryForVariant(variantId);
      element.textContent = inventory;
    });
  }
  
  // Debug: Log inventory data
  function debugInventoryGlobals() {
    console.log('=== INVENTORY DEBUG INFO ===');
    console.log('All variants:', allVariants);
    console.log('============================');
  }
  
  // Update inventory on page load
  setTimeout(function() {
    debugInventoryGlobals();
    updateInventoryDisplays();
  }, 500);
  
  // Also try after a longer delay to ensure your script has loaded
  setTimeout(function() {
    debugInventoryGlobals();
    updateInventoryDisplays();
  }, 2000);
  // Also compute suggested selling price range after initial updates
  setTimeout(function() {
    updateSuggestedSellingRange(selectedCountry || null);
  }, 2100);
  
  // Country selection functionality
  const countryButtons = document.querySelectorAll('.dynamic-product-page .variant-box-btn[data-country]');
  const selectedCountrySpan = document.querySelector('.dynamic-product-page .selected-country');
  const selectedCountryWrapper = document.querySelector('.dynamic-product-page .selected-country-wrapper');
  
  // Hide country wrapper initially
  if (selectedCountryWrapper) {
    selectedCountryWrapper.style.display = 'none';
  }
  
  countryButtons.forEach(button => {
    button.addEventListener('click', function() {
      // Remove selected state from all country buttons
      countryButtons.forEach(btn => {
        btn.classList.remove('selected');
        btn.removeAttribute('data-selected');
      });
      
      // Add selected state to clicked button
      this.classList.add('selected');
      this.setAttribute('data-selected', 'true');
      
      // Update selected country display
      const country = this.dataset.country || this.textContent.trim();
      selectedCountry = country.toLowerCase(); // Update global country variable
      
      if (selectedCountrySpan) {
        selectedCountrySpan.textContent = country.toUpperCase();
      }
      
      // Show country wrapper once a country is selected
      if (selectedCountryWrapper) {
        selectedCountryWrapper.style.display = 'inline';
      }
      
      // Trigger filtering based on country selection
      filterAndDisplay();
      
      // Update market insights based on country
      updateMarketInsights(country);
      
      // Update delivery time display based on country
      updateDeliveryTimeByCountry(country);
      
      // Find the currently displayed variant and update shipping times
      const currentVariant = findCurrentVariant();
      if (currentVariant) {
        updateShippingTimes(currentVariant);
      }
    });
  });
  
  // Function to update delivery time based on country
  function updateDeliveryTimeByCountry(country) {
    const deliveryTimeDisplay = document.getElementById('delivery-time-display');
    if (deliveryTimeDisplay) {
      // Hide all delivery time options first
      const uaeTime = deliveryTimeDisplay.querySelector('.delivery-time-uae');
      const ksaTime = deliveryTimeDisplay.querySelector('.delivery-time-ksa');
      const defaultTime = deliveryTimeDisplay.querySelector('.delivery-time-default');
      
      if (uaeTime) uaeTime.style.display = 'none';
      if (ksaTime) ksaTime.style.display = 'none';
      if (defaultTime) defaultTime.style.display = 'none';
      
      // Show appropriate delivery time based on country
      if (country === 'uae' && uaeTime) {
        uaeTime.style.display = 'inline';
      } else if (country === 'ksa' && ksaTime) {
        ksaTime.style.display = 'inline';
      } else if (defaultTime) {
        defaultTime.style.display = 'inline';
      }
    }
  }

  // Helper function to find the currently selected variant
  function findCurrentVariant() {
    return allVariants.find(variant => {
      let matches = true;
      
      // Must match all selected variant options
      Object.keys(selectedVariants).forEach(position => {
        const optionKey = `option${position}`;
        if (variant[optionKey] !== selectedVariants[position]) {
          matches = false;
        }
      });
      
      return matches;
    });
  }
  
  // Auto-select first country button if country options exist
  if (countryOptionPosition && countryButtons.length > 0) {
    countryButtons[0].click();
  }
  
  // Tab functionality
  const tabButtons = document.querySelectorAll('.dynamic-product-page .tab-btn');
  
  tabButtons.forEach(button => {
    // Disable tabs with "Coming Soon" badge
    if (button.querySelector('.coming-soon-badge')) {
      button.disabled = true;
      button.style.cursor = 'not-allowed';
    }
    
    button.addEventListener('click', function() {
      // Don't allow switching to disabled tabs
      if (this.disabled) {
        return;
      }
      
      // Remove active class from all tabs
      tabButtons.forEach(tab => tab.classList.remove('active'));
      
      // Add active class to clicked tab
      this.classList.add('active');
    });
  });
  
  // Thumbnail gallery functionality
  const thumbnailItems = document.querySelectorAll('.dynamic-product-page .thumbnail-item');
  const mainImage = document.querySelector('.dynamic-product-page .main-product-image');
  
  thumbnailItems.forEach(item => {
    item.addEventListener('click', function() {
      // Remove active class from all thumbnails
      thumbnailItems.forEach(thumb => thumb.classList.remove('active'));
      
      // Add active class to clicked thumbnail
      this.classList.add('active');
      
      // Update main image (you would need to implement this based on your image structure)
      const thumbnailImg = this.querySelector('.thumbnail-image');
      if (thumbnailImg && mainImage) {
        mainImage.src = thumbnailImg.src.replace('300x', '1920x');
      }
    });
  });
  
  // Dynamic Read More functionality (only for mobile)
  const productDescription = document.querySelector('.dynamic-product-page .product-description');
  const readMoreWrapper = document.querySelector('.dynamic-product-page .read-more-wrapper');
  const readMoreLink = document.querySelector('.dynamic-product-page .read-more-link');
  const arrow = document.querySelector('.dynamic-product-page .arrow');
  
  if (productDescription && readMoreWrapper && readMoreLink) {
    // Only apply read more functionality on mobile (screen width <= 768px)
    function handleReadMore() {
      if (window.innerWidth <= 768) {
        // Check if content exceeds 3 lines
        const lineHeight = parseInt(window.getComputedStyle(productDescription).lineHeight);
        const maxHeight = lineHeight * 3;
        
        if (productDescription.scrollHeight > maxHeight) {
          // Show read more button and collapse content
          readMoreWrapper.style.display = 'block';
          productDescription.classList.add('collapsed');
          
          // Add click event listener
          readMoreLink.addEventListener('click', function(e) {
            e.preventDefault();
            
            if (productDescription.classList.contains('collapsed')) {
              // Expand
              productDescription.classList.remove('collapsed');
              readMoreLink.innerHTML = 'Read Less <span class="arrow expanded">‚Üì</span>';
            } else {
              // Collapse
              productDescription.classList.add('collapsed');
              readMoreLink.innerHTML = 'Read More <span class="arrow">‚Üì</span>';
            }
          });
        }
      } else {
        // Desktop: Remove any collapsed state and hide read more button
        productDescription.classList.remove('collapsed');
        readMoreWrapper.style.display = 'none';
      }
    }
    
    // Initial call
    handleReadMore();
    
    // Handle window resize
    window.addEventListener('resize', handleReadMore);
  }
  
  function updateMarketInsights(country) {
    // Update market insights based on the selected country
    console.log('Updating market insights for:', country);
    
    // Update dispatch time in shipping tiles
    const dispatchTimeElements = document.querySelectorAll('.dynamic-product-page .dispatch-time');
    dispatchTimeElements.forEach(dispatchTimeElement => {
      const newDispatchTime = dispatchTimeElement.getAttribute(`data-dispatch-time-${country}`);
      if (newDispatchTime) {
        dispatchTimeElement.textContent = newDispatchTime;
      }
    });
    
    // Update delivery time in shipping tiles based on country
    const deliveryTimeDisplay = document.getElementById('delivery-time-display');
    if (deliveryTimeDisplay) {
      // Hide all delivery time options first
      const uaeTime = deliveryTimeDisplay.querySelector('.delivery-time-uae');
      const ksaTime = deliveryTimeDisplay.querySelector('.delivery-time-ksa');
      const defaultTime = deliveryTimeDisplay.querySelector('.delivery-time-default');
      
      if (uaeTime) uaeTime.style.display = 'none';
      if (ksaTime) ksaTime.style.display = 'none';
      if (defaultTime) defaultTime.style.display = 'none';
      
      // Show appropriate delivery time based on country
      if (country === 'uae' && uaeTime) {
        uaeTime.style.display = 'inline';
      } else if (country === 'ksa' && ksaTime) {
        ksaTime.style.display = 'inline';
      } else if (defaultTime) {
        defaultTime.style.display = 'inline';
      }
    }
    
    // Update suggested selling price in market insights
    const suggestedPriceElement = document.querySelector('.dynamic-product-page .suggested-selling-price');
    if (suggestedPriceElement) {
      const newSuggestedPrice = suggestedPriceElement.getAttribute(`data-suggested-price-${country}`);
      if (newSuggestedPrice) {
        suggestedPriceElement.textContent = newSuggestedPrice;
      }
    }
    
    // Update pricing and SKUs
    updatePricingAndSKUs(country);
  }
  
  function updatePricingAndSKUs(country) {
    const tableRows = document.querySelectorAll('.dynamic-product-page .table-row[data-variant-id]');
    
    tableRows.forEach(row => {
      // Update SKU
      const skuElement = row.querySelector('.sku-code');
      if (skuElement) {
        const newSKU = skuElement.getAttribute(`data-sku-${country}`);
        if (newSKU) {
          skuElement.textContent = newSKU;
        }
      }
      
      // Update Product Price
      const priceElement = row.querySelector('.product-price');
      if (priceElement) {
        const newPrice = priceElement.getAttribute(`data-price-${country}`);
        const currency = priceElement.getAttribute(`data-currency-${country}`);
        if (newPrice && currency) {
          priceElement.textContent = formatPrice(newPrice, currency);
        }
      }
      
      // Update Compare At Price
      const compareElement = row.querySelector('.compare-price');
      if (compareElement) {
        const newComparePrice = compareElement.getAttribute(`data-compare-${country}`);
        const currency = compareElement.getAttribute(`data-currency-${country}`);
        if (newComparePrice && currency) {
          compareElement.textContent = formatPrice(newComparePrice, currency);
        }
      }
      
      // Update Delivery Cost
      const deliveryElement = row.querySelector('.delivery-cost');
      if (deliveryElement) {
        const newDelivery = deliveryElement.getAttribute(`data-delivery-${country}`);
        if (newDelivery) {
          deliveryElement.textContent = newDelivery;
        }
      }
      
      // Update Total Cost
      const totalElement = row.querySelector('.total-cost');
      if (totalElement) {
        const newTotal = totalElement.getAttribute(`data-total-${country}`);
        const currency = row.querySelector('.product-price').getAttribute(`data-currency-${country}`);
        if (newTotal && currency) {
          totalElement.textContent = formatPrice(newTotal, currency);
        }
      }
      
    });

    // Update suggested selling price range after pricing updates
    updateSuggestedSellingRange(country);
  }

  // --- Suggested selling price range calculation ---
  // Computes low = totalCost * 2.2 and high = totalCost * 2.7 and updates UI
  function updateSuggestedSellingRange(country) {
    try {
      const suggestedEl = document.querySelector('.dynamic-product-page .suggested-selling-price');
      if (!suggestedEl) return;

      // Find the visible variant row (or the first row if mobile)
      const visibleRow = document.querySelector('.dynamic-product-page .table-row.visible') || document.querySelector('.dynamic-product-page .table-row[data-variant-id]');

      // Prefer using data-total-{country} attribute if present on the row
      let totalRaw = null;
      let currency = null;
      if (visibleRow) {
        const totalEl = visibleRow.querySelector('.total-cost');
        const priceEl = visibleRow.querySelector('.product-price');
        if (totalEl) {
          totalRaw = totalEl.getAttribute(`data-total-${country}`) || totalEl.textContent;
        }
        if (priceEl) {
          currency = priceEl.getAttribute(`data-currency-${country}`) || priceEl.getAttribute('data-currency-uae') || priceEl.getAttribute('data-currency-ksa');
        }
      }

      // Fallback: try to read from suggestedEl data attribute (which may contain money already)
      if (!totalRaw) {
        const fallback = suggestedEl.getAttribute(`data-suggested-price-${country}`) || suggestedEl.getAttribute('data-suggested-price-uae') || suggestedEl.getAttribute('data-suggested-price-ksa');
        // try to extract a number from fallback
        if (fallback) {
          totalRaw = fallback;
        }
      }

      // Parse numeric amount from strings like 'AED 123.45' or '12345' (cents)
      function parseAmount(raw) {
        if (!raw && raw !== 0) return null;
        // If looks like an integer in cents (only digits), return cents as number
        const digitsOnly = String(raw).trim();
        // If contains currency and decimal (e.g. 'AED 123.45'), extract number
        const match = digitsOnly.match(/([0-9]+(?:\.[0-9]+)?)/);
        if (match) {
          // Determine if original data is in cents by checking length or if attribute looked like an integer without dot
          const num = parseFloat(match[1]);
          // If the attribute value appears to be provided in 'cents' (large integer), heuristics: no dot and > 1000
          if (!match[1].includes('.') && num > 1000) {
            // treat as cents
            return num / 100;
          }
          return num;
        }
        return null;
      }

      const totalNumber = parseAmount(totalRaw);

      if (totalNumber === null || isNaN(totalNumber)) {
        // If we couldn't parse a numeric total, don't update range; show fallback text
        return;
      }

      const low = totalNumber * 2.2;
      const high = totalNumber * 2.7;

      // Use currency or guess AED if missing
      const curr = currency || (country && country.toUpperCase() === 'KSA' ? 'SAR' : 'AED');

      // Format to 2 decimals but if values are big integers show with no decimals for neatness
      function fmt(val) {
        // Round to nearest whole number (no decimal points)
        return `${curr} ${Math.round(val)}`;
      }

      suggestedEl.textContent = `${fmt(low)} - ${fmt(high)}`;
    } catch (err) {
      console.error('Error updating suggested selling range', err);
    }
  }
  
  function formatPrice(amount, currency) {
    const numAmount = parseInt(amount);
    const formattedAmount = (numAmount / 100).toFixed(2);
    return `${currency} ${formattedAmount}`;
  }
  
  // Tooltip functionality - tap only, toggle on/off
  const tooltipIcons = document.querySelectorAll('.dynamic-product-page .tooltip-icon-corner');
  
  tooltipIcons.forEach(icon => {
    icon.addEventListener('click', function(e) {
      e.stopPropagation();
      
      // Close all other tooltips
      tooltipIcons.forEach(otherIcon => {
        if (otherIcon !== this) {
          otherIcon.classList.remove('active');
        }
      });
      
      // Toggle current tooltip
      this.classList.toggle('active');
    });
  });
  
  // Close tooltip when clicking outside
  document.addEventListener('click', function(e) {
    if (!e.target.closest('.tooltip-icon-corner')) {
      tooltipIcons.forEach(icon => {
        icon.classList.remove('active');
      });
    }
  });
  
  // Handle responsive behavior for variant display
  function handleVariantDisplay() {
    const allRows = document.querySelectorAll('.dynamic-product-page .table-row[data-variant-id]');
    
    if (window.innerWidth <= 768) {
      // Mobile: Show all variant cards in slider
      allRows.forEach(row => {
        row.style.display = 'block';
      });
    } else {
      // Desktop: Show only selected variant
      allRows.forEach(row => {
        row.style.display = 'none';
        if (row.classList.contains('visible')) {
          row.style.display = 'grid';
        }
      });
    }
  }
  
  // Initial call
  handleVariantDisplay();
  
  // Listen for window resize
  window.addEventListener('resize', handleVariantDisplay);
});
</script>

{% schema %}
{
  "name": "Complete Product Page",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "select",
      "id": "top_spacing",
      "options": [
        {
          "value": "none",
          "label": "None"
        },
        {
          "value": "small",
          "label": "Small"
        },
        {
          "value": "medium",
          "label": "Medium"
        },
        {
          "value": "normal",
          "label": "Normal"
        }
      ],
      "default": "normal",
      "label": "Top Spacing"
    },
    {
      "type": "select",
      "id": "width",
      "options": [
        {
          "value": "default",
          "label": "Default"
        },
        {
          "value": "page-width",
          "label": "Page Width"
        },
        {
          "value": "page-wide",
          "label": "Page Wide"
        }
      ],
      "default": "default",
      "label": "Width"
    }
  ]
}
{% endschema %}